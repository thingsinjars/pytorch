{"name":"monitor.py","path":"tools/stats/monitor.py","content":{"structured":{"description":"","items":[{"id":"5750fcfd-bdc0-4bab-898b-778ec93159e1","ancestors":[],"type":"function","name":"get_processes_running_python_tests","location":{"offset":" ","indent":4,"start":29,"insert":30},"code":"def get_processes_running_python_tests() -> List[Any]:\n    python_processes = []\n    for process in psutil.process_iter():\n        try:\n            if \"python\" in process.name() and process.cmdline():\n                python_processes.append(process)\n        except (psutil.NoSuchProcess, psutil.AccessDenied):\n            # access denied or the process died\n            pass\n    return python_processes","params":[],"returns":"List[Any]","skip":false,"length":10,"comment":{"description":"iterates through running processes using `psutil` and adds to a list any processes that have \"python\" in their name and execute a command using `cmdline()`.","params":[],"returns":{"type":"List[Any]","description":"a list of Python processes running on the system."}}},{"id":"74c57abe-3bb0-44fa-8db4-0871ef74774b","ancestors":[],"type":"function","name":"get_per_process_cpu_info","location":{"offset":" ","indent":4,"start":41,"insert":42},"code":"def get_per_process_cpu_info() -> List[Dict[str, Any]]:\n    processes = get_processes_running_python_tests()\n    per_process_info = []\n    for p in processes:\n        info = {\n            \"pid\": p.pid,\n            \"cmd\": \" \".join(p.cmdline()),\n            \"cpu_percent\": p.cpu_percent(),\n            \"rss_memory\": p.memory_info().rss,\n        }\n\n        # https://psutil.readthedocs.io/en/latest/index.html?highlight=memory_full_info\n        # requires higher user privileges and could throw AccessDenied error, i.e. mac\n        try:\n            memory_full_info = p.memory_full_info()\n\n            info[\"uss_memory\"] = memory_full_info.uss\n            if \"pss\" in memory_full_info:\n                # only availiable in linux\n                info[\"pss_memory\"] = memory_full_info.pss\n\n        except psutil.AccessDenied as e:\n            # It's ok to skip this\n            pass\n\n        per_process_info.append(info)\n    return per_process_info","params":[],"returns":"List[Dict[str, Any]]","skip":false,"length":27,"comment":{"description":"retrieves CPU information and memory usage for each running Python test process, and returns a list of dictionaries containing this information for each process.","params":[],"returns":{"type":"List[Dict[str, Any]]","description":"a list of dictionaries containing CPU information and memory usage for each running Python process."}}},{"id":"6b3f6343-b89a-4635-a60d-994be54133de","ancestors":[],"type":"function","name":"get_per_process_gpu_info","location":{"offset":" ","indent":4,"start":70,"insert":71},"code":"def get_per_process_gpu_info(handle: Any) -> List[Dict[str, Any]]:\n    processes = pynvml.nvmlDeviceGetComputeRunningProcesses(handle)\n    per_process_info = []\n    for p in processes:\n        info = {\"pid\": p.pid, \"gpu_memory\": p.usedGpuMemory}\n        per_process_info.append(info)\n    return per_process_info","params":[{"name":"handle","value":null,"type":"Any"}],"returns":"List[Dict[str, Any]]","skip":false,"length":7,"comment":{"description":"retrieves GPU information for each running process on a host using the NVML library.","params":[{"name":"handle","type":"Any","value":null,"description":"3D NVML handle that is used to retrieve GPU information for each process."}],"returns":{"type":"List[Dict[str, Any]]","description":"a list of dictionaries containing information about each running process on the system, including its PID and GPU memory usage."}}},{"id":"58bcba1f-5c5e-4b89-95ae-167cd4684ffe","ancestors":[],"type":"function","name":"rocm_list_devices","location":{"offset":" ","indent":4,"start":83,"insert":84},"code":"def rocm_list_devices() -> List[int]:\n    num = c_uint32(0)\n    ret = rocmsmi.rsmi_num_monitor_devices(byref(num))\n    if rocm_ret_ok(ret):\n        return list(range(num.value))\n    return []","params":[],"returns":"List[int]","skip":false,"length":6,"comment":{"description":"calls the `rocmsmi.rsmi_num_monitor_devices` function to retrieve a list of device IDs. It then returns the list of IDs as an integer list.","params":[],"returns":{"type":"List[int]","description":"a list of integer indices representing the available Rocket Morty devices."}}},{"id":"663206fa-b1b8-4495-b808-563fbfd2ea2d","ancestors":[],"type":"function","name":"rocm_get_mem_use","location":{"offset":" ","indent":4,"start":91,"insert":92},"code":"def rocm_get_mem_use(device: int) -> float:\n    memoryUse = c_uint64()\n    memoryTot = c_uint64()\n\n    ret = rocmsmi.rsmi_dev_memory_usage_get(device, 0, byref(memoryUse))\n    if rocm_ret_ok(ret):\n        ret = rocmsmi.rsmi_dev_memory_total_get(device, 0, byref(memoryTot))\n        if rocm_ret_ok(ret):\n            return float(memoryUse.value) / float(memoryTot.value)\n    return 0.0","params":[{"name":"device","value":null,"type":"int"}],"returns":"float","skip":false,"length":10,"comment":{"description":"calculates the memory usage ratio for a given device, returning the result as a floating-point number.","params":[{"name":"device","type":"int","value":null,"description":"64-bit integer value of the device for which memory usage is to be calculated."}],"returns":{"type":"float","description":"a fraction representing the percentage of memory used by a RoCM device."}}},{"id":"aa5dfc14-9137-4271-a284-5e8fe6b90050","ancestors":[],"type":"function","name":"rocm_get_gpu_use","location":{"offset":" ","indent":4,"start":103,"insert":104},"code":"def rocm_get_gpu_use(device: int) -> float:\n    percent = c_uint32()\n    ret = rocmsmi.rsmi_dev_busy_percent_get(device, byref(percent))\n    if rocm_ret_ok(ret):\n        return float(percent.value)\n    return 0.0","params":[{"name":"device","value":null,"type":"int"}],"returns":"float","skip":false,"length":6,"comment":{"description":"returns the current percentage of a Rocket Morty GPU's use based on an RMI call to `rocmsmi.rsmi_dev_busy_percent_get`.","params":[{"name":"device","type":"int","value":null,"description":"3D accelerator card to be checked for busy percent, and it takes an integer value ranging from 0 to 255, inclusive of ROCMSMI device IDs."}],"returns":{"type":"float","description":"a percentage value representing the current GPU utilization."}}},{"id":"deda43e1-627a-4eb6-8dd6-a6dafda8a0cc","ancestors":[],"type":"function","name":"rocm_get_pid_list","location":{"offset":" ","indent":4,"start":111,"insert":112},"code":"def rocm_get_pid_list() -> List[Any]:\n    num_items = c_uint32()\n    ret = rocmsmi.rsmi_compute_process_info_get(None, byref(num_items))\n    if rocm_ret_ok(ret):\n        buff_sz = num_items.value + 10\n        procs = (rsmi_process_info_t * buff_sz)()\n        procList = []\n        ret = rocmsmi.rsmi_compute_process_info_get(byref(procs), byref(num_items))\n        for i in range(num_items.value):\n            procList.append(procs[i].process_id)\n        return procList\n    return []","params":[],"returns":"List[Any]","skip":false,"length":12,"comment":{"description":"computes and returns a list of process IDs using the Rocks Machine Interface (RMI). It takes no arguments and returns a list of process IDs on success, or an empty list on failure.","params":[],"returns":{"type":"List[Any]","description":"a list of process IDs."}}},{"id":"a7560313-acf4-4008-bea9-4c956b4d91e9","ancestors":[],"type":"function","name":"rocm_get_per_process_gpu_info","location":{"offset":" ","indent":4,"start":125,"insert":126},"code":"def rocm_get_per_process_gpu_info() -> List[Dict[str, Any]]:\n    per_process_info = []\n    for pid in rocm_get_pid_list():\n        proc = rsmi_process_info_t()\n        ret = rocmsmi.rsmi_compute_process_info_by_pid_get(int(pid), byref(proc))\n        if rocm_ret_ok(ret):\n            info = {\"pid\": pid, \"gpu_memory\": proc.vram_usage}\n            per_process_info.append(info)\n    return per_process_info","params":[],"returns":"List[Dict[str, Any]]","skip":false,"length":9,"comment":{"description":"retrieves GPU information for each process in a list and returns a list of dictionaries containing \"pid\" and \"gpu_memory\" fields.","params":[],"returns":{"type":"List[Dict[str, Any]]","description":"a list of dictionaries containing GPU information for each process in a given list."}}},{"id":"198ef92c-704b-4243-8d5b-c6ece6ef5d70","ancestors":[],"type":"function","name":"exit_gracefully","location":{"offset":" ","indent":8,"start":155,"insert":156},"code":"def exit_gracefully(*args: Any) -> None:\n        global kill_now\n        kill_now = True","params":[{"name":"*args","value":null,"type":"Any"}],"returns":false,"skip":false,"length":3,"comment":{"description":"sets a global variable `kill_now` to `True`, indicating that the program should exit gracefully with the specified arguments.","params":[{"name":"*args","type":"Any","value":null,"description":"0 or more arguments passed to the function, which are stored in a variable called `kill_now`."}],"returns":null}}]}}}